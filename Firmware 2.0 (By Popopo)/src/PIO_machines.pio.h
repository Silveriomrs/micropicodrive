// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// --------------- //
// microdrive_read //
// --------------- //

#define microdrive_read_wrap_target 0
#define microdrive_read_wrap 18

#define microdrive_read_offset_rx_gap 2u

static const uint16_t microdrive_read_program_instructions[] = {
            //     .wrap_target
    0xe021, //  0: set    x, 1                       
    0xe040, //  1: set    y, 0                       
    0x2047, //  2: wait   0 irq, 7                   
    0xe080, //  3: set    pindirs, 0                 
    0x2ea0, //  4: wait   1 pin, 0               [14]
    0x00c9, //  5: jmp    pin, 9                     
    0x4021, //  6: in     x, 1                       
    0x8020, //  7: push   block                      
    0x0004, //  8: jmp    4                          
    0x4041, //  9: in     y, 1                       
    0x8020, // 10: push   block                      
    0x2e20, // 11: wait   0 pin, 0               [14]
    0x00d0, // 12: jmp    pin, 16                    
    0x4041, // 13: in     y, 1                       
    0x8020, // 14: push   block                      
    0x0004, // 15: jmp    4                          
    0x4021, // 16: in     x, 1                       
    0x8020, // 17: push   block                      
    0x000b, // 18: jmp    11                         
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program microdrive_read_program = {
    .instructions = microdrive_read_program_instructions,
    .length = 19,
    .origin = -1,
};

static inline pio_sm_config microdrive_read_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + microdrive_read_wrap_target, offset + microdrive_read_wrap);
    return c;
}
#endif

// ---------------- //
// microdrive_write //
// ---------------- //

#define microdrive_write_wrap_target 0
#define microdrive_write_wrap 15

#define microdrive_write_offset_tx_sleep 0u
#define microdrive_write_offset_tx_gap 2u

static const uint16_t microdrive_write_program_instructions[] = {
            //     .wrap_target
    0xf080, //  0: set    pindirs, 0      side 0     
    0x0000, //  1: jmp    0                          
    0xf881, //  2: set    pindirs, 1      side 1     
    0x2047, //  3: wait   0 irq, 7                   
    0x7821, //  4: out    x, 1            side 1     
    0x0628, //  5: jmp    !x, 8                  [6] 
    0xb042, //  6: nop                    side 0     
    0x0604, //  7: jmp    4                      [6] 
    0xa042, //  8: nop                               
    0xa642, //  9: nop                           [6] 
    0x7021, // 10: out    x, 1            side 0     
    0x062e, // 11: jmp    !x, 14                 [6] 
    0xb842, // 12: nop                    side 1     
    0x060a, // 13: jmp    10                     [6] 
    0xa042, // 14: nop                               
    0x0604, // 15: jmp    4                      [6] 
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program microdrive_write_program = {
    .instructions = microdrive_write_program_instructions,
    .length = 16,
    .origin = -1,
};

static inline pio_sm_config microdrive_write_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + microdrive_write_wrap_target, offset + microdrive_write_wrap);
    sm_config_set_sideset(&c, 2, true, false);
    return c;
}
#endif

// ----------------------- //
// microdrive_shift_select //
// ----------------------- //

#define microdrive_shift_select_wrap_target 0
#define microdrive_shift_select_wrap 14

static const uint16_t microdrive_shift_select_program_instructions[] = {
            //     .wrap_target
    0xe084, //  0: set    pindirs, 4                 
    0x20c6, //  1: wait   1 irq, 6                   
    0x27a1, //  2: wait   1 pin, 1               [7] 
    0x4001, //  3: in     pins, 1                    
    0xa046, //  4: mov    y, isr                     
    0xa0e2, //  5: mov    osr, y                     
    0x2021, //  6: wait   0 pin, 1                   
    0x6001, //  7: out    pins, 1                    
    0x00ab, //  8: jmp    x != y, 11                 
    0xa0c3, //  9: mov    isr, null                  
    0x0002, // 10: jmp    2                          
    0xa022, // 11: mov    x, y                       
    0x8020, // 12: push   block                      
    0xc000, // 13: irq    nowait 0                   
    0x0002, // 14: jmp    2                          
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program microdrive_shift_select_program = {
    .instructions = microdrive_shift_select_program_instructions,
    .length = 15,
    .origin = -1,
};

static inline pio_sm_config microdrive_shift_select_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + microdrive_shift_select_wrap_target, offset + microdrive_shift_select_wrap);
    return c;
}
#endif

// ----------------- //
// microdrive_status //
// ----------------- //

#define microdrive_status_wrap_target 0
#define microdrive_status_wrap 12

#define microdrive_status_offset_device_deselected 1u

static const uint16_t microdrive_status_program_instructions[] = {
            //     .wrap_target
    0xe080, //  0: set    pindirs, 0                 
    0xe022, //  1: set    x, 2                       
    0xa0c3, //  2: mov    isr, null                  
    0x20c6, //  3: wait   1 irq, 6                   
    0x4002, //  4: in     pins, 2                    
    0xa046, //  5: mov    y, isr                     
    0x00a9, //  6: jmp    x != y, 9                  
    0xa0c3, //  7: mov    isr, null                  
    0x0004, //  8: jmp    4                          
    0xa022, //  9: mov    x, y                       
    0x8020, // 10: push   block                      
    0xc000, // 11: irq    nowait 0                   
    0x0004, // 12: jmp    4                          
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program microdrive_status_program = {
    .instructions = microdrive_status_program_instructions,
    .length = 13,
    .origin = -1,
};

static inline pio_sm_config microdrive_status_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + microdrive_status_wrap_target, offset + microdrive_status_wrap);
    return c;
}
#endif

